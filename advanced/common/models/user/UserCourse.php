<?php

namespace common\models\user;

use common\models\order\Order;
use common\models\task\TaskSubmit;
use Yii;

use common\models\course\Course;
use yii\base\Exception;
use yii\log\Logger;

/**
 * This is the model class for table "user_course".
 *
 * @property int $user_id 用户
 * @property int $course_id 课程
 * @property bool $try 是否为试用
 * @property int $tryed_at 试用结束时间
 * @property int $used_at 使用结束时间
 * @property int $created_at 开始时间
 * @property int $progress_total 进度-总进度
 * @property int $progress_completed 进度-已完成
 * @property bool $is_completed 是否已经完成课程
 *
 * @property User $user
 * @property Course $course
 */
class UserCourse extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'user_course';
    }

    /**
     * @return array
     */
    public function fields()
    {
        $parent = parent::fields();
        $parent["course"] = "course";
        return $parent;
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['user_id', 'course_id'], 'required'],
            [['user_id', 'course_id', 'tryed_at', 'used_at', 'created_at', 'progress_total', 'progress_completed'], 'integer'],
            [['try', 'is_completed'], 'boolean'],
            [['user_id', 'course_id'], 'unique', 'targetAttribute' => ['user_id', 'course_id']],
            [['course_id'], 'exist', 'skipOnError' => true, 'targetClass' => Course::className(), 'targetAttribute' => ['course_id' => 'id']],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['user_id' => 'id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'user_id' => 'User ID',
            'course_id' => 'Course ID',
            'try' => 'Try',
            'tryed_at' => 'Tryed At',
            'used_at' => 'Used At',
            'created_at' => 'Created At',
            'progress_total' => 'Progress Total',
            'progress_completed' => 'Progress Completed',
            'is_completed' => 'Is Completed'
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCourse()
    {
        return $this->hasOne(Course::className(), ['id' => 'course_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::className(), ['id' => 'user_id']);
    }

    /**
     * @param bool $insert
     * @return bool
     */
    public function beforeSave($insert)
    {
        if($insert){
            //保存创建时间
            $this->created_at = time();
            //刷新课程进度
            $this->refreshProgress();
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * 刷新课程进度(可以发生保存)
     * @param bool $is_save 是否进行保存
     * @return bool
     */
    public function refreshProgress($is_save=false){
        //更新课程进度
        $this->progress_total = count($this->course->tasks);
        $this->progress_completed = TaskSubmit::find()->where(["user_id"=>$this->user_id,"course_id"=>$this->course_id,"status"=>2])->count();

        //判断是否完成课程（一但完成不再改变）
        if(($this->is_completed != true) && ($this->progress_total == $this->progress_completed))
            $this->is_completed = true;
        else
            $this->is_completed = false;

        //是否进行保存
        if($is_save)
            return $this->save();
        else
            return false;
    }

    /**
     * 试用课程
     * @param $user_id
     * @param $course_id
     * @return bool
     * @throws Exception
     */
    static function tryCourse($user_id, $course_id){
        //查询是否已经购买或者试用
        $model = self::findOne(["user_id"=>$user_id, "course_id"=>$course_id]);
        if($model)
            throw new Exception("exist.");

        //获取课程
        $course = Course::findOne($course_id);
        if(!$course)
            throw new Exception("not fount course.");

        //新建试用记录
        $model = new self();
        $model->user_id = $user_id;
        $model->course_id = $course_id;
        $model->try = true;
        $model->tryed_at = time() + ($course->try_day * 24 * 60 * 60);
        $model->used_at = $model->tryed_at;

        //保存信息
        if(!$model->save())
            return false;

        //发送邮件
        Yii::$app->mailer->compose('template/try.php', ["model"=>$model])
            ->setFrom(Yii::$app->params["supportEmail"])
            ->setTo([$model->user->email])
            ->setSubject('i-Link 课程试用成功')
            ->send();

        //返回成功
        return true;
    }

    /**
     * 购买课程
     * @param $user_id      string      用户ID：订单信息里有(冗余)，保留来做无订单购买
     * @param $course_id    string      课程ID：订单信息里有(冗余)，保留来做无订单购买
     * @param $order        Order       订单信息
     * @return bool
     * @throws Exception
     */
    static function buyCourse($user_id, $course_id, $order = null){
        //获取课程
        $course = Course::findOne($course_id);
        if(!$course)
            throw new Exception("not fount course.");

        //查询是否已经购买或者试用
        $model = self::findOne(["user_id"=>$user_id, "course_id"=>$course_id]);

        //如果有旧记录(试用或者购买)，则叠加时间
        if($model){
            $old_time = max(time(),$model->tryed_at,$model->used_at);
            $model->try = false;
            $model->used_at = $old_time + ($course->buy_day * 24 * 60 * 60);
        }
        //如果没有旧记录，则全新记录
        else{
            $model = new self();
            $model->try = false;
            $model->user_id = $user_id;
            $model->course_id = $course_id;
            $model->used_at = time() + ($course->buy_day * 24 * 60 * 60);
            $model->used_at += ($course->try_day * 24 * 60 * 60);//一并领取所有试用时间
        }

        //保存信息
        if(!$model->save()){
            Yii::error($model->errors,Logger::LEVEL_ERROR);
            return false;
        }

        //发送邮件(有订单时才发送)
        if($order){
            Yii::$app->mailer->compose('template/buy.php', ['model'=>$order,"user_course"=>$model])
                ->setFrom(Yii::$app->params["supportEmail"])
                ->setTo([$order->user->email])
                ->setSubject('i-Link 课程购买成功')
                ->send();
        }

        //返回成功
        return true;
    }

    /**
     * 获取用户拥有课程
     * @param $user_id
     * @return array|\yii\db\ActiveRecord[]
     */
    static function getHaveCourse($user_id){
        $query = self::find()
            ->andWhere('user_id=:user_id AND (tryed_at>:time OR used_at>:time)', [":user_id"=>$user_id, ":time"=>time()]);

        $list = $query->all();

        return $list;
    }
}
